#!/bin/bash

# AFREC.sh
# mastanca

# NO BORRAR LOS COMENTARIOS, SON PARA DEBUGGING

RECHAZADOS=$RECHDIR
ACEPTADOS=$ACEPDIR
NOVEDADES=$NOVEDIR
MOVERA="$BINDIR/MoverA.sh"
GRALOG="$BINDIR/GraLog.sh"


# DEBERIA SER CORRIDO EN BACKGROUND YA QUE ES UN DAEMON
TIEMPO_SLEEP_SEGUNDOS="30"
# Mensajes
MENSAJE_ARCHIVO_ACEPTADO="Archivo $NOMBRE_ARCHIVO aceptado, movido a $PATH_ACEPTADO"
MENSAJE_TIPO_INVALIDO="Tipo de archivo invalido"
MENSAJE_FECHA_INVALIDA="Fecha invalida"
MENSAJE_FECHA_FUERA_DE_RANGO="Fecha fuera de rango"
MENSAJE_CENTRAL_INEXISTENTE="Central inexistente"
MENSAJE_ERROR_DESCONOCIDO="Error desconocido"
MENSAJE_AFUMB_INICIADO="AFUMB corriendo bajo el no.: $PID"
MENSAJE_AFUMB_OCUPADO="Invocacion de AFUMB pospuesta para el siguiente ciclo"

# Devuelve en la variable cantidad_archivos
# la cantidad en el directorio
function hay_archivos() {
  #cantidad_archivos=$(ls -1 $1 | wc -l)
  #ESTO LO AGREGO PARA QUE EL ls NO CUENTA LA CARPETA "duplicados" QUE PODRIA LLEGAR A ESTAR A CAUSA DEL MoverA
  cantidad_archivos=$(ls -1 $1 | grep -v "duplicados" | wc -l)
  # echo "La cantidad de archivos es $cantidad_archivos"
}


# Valida que sean archivos de texto , los que hay en el directorio $NOVEDADES
# Los que no los mueve a $RECHAZADOS
function validar_tipo_archivos (){
  # echo "Estoy en validar tipo archivos"
	for archivo in $(ls -1 "$NOVEDADES");do
    # echo "Valido archivo"
    # echo "$NOVEDADES/$archivo"
		if [ $(file "$NOVEDADES/$archivo" | grep -c "text") = 0 ];then
      $GRALOG "AFREC" "$MENSAJE_TIPO_INVALIDO" "INFO"
      #echo "AFREC" "$MENSAJE_TIPO_INVALIDO" "INFO"
      # echo "Soy el file invalido $archivo"
      $MOVERA "$NOVEDADES/$archivo" "$RECHAZADOS"
     # mv "$NOVEDADES/$archivo" $RECHAZADOS
			#Escribir log
			#echo "$archivo no es de texto"
		fi
	done
}

#Guarda los codigos de centrales en el array COD_CENTRALES
function obtener_codigos_centrales() {
 COD_CENTRALES=($(cat "$MAEDIR/centrales.csv" | cut -d \; -f 1))
 # for codigo in $codigos;do
 #    COD_CENTRALES[$codigo]=1
 # done
}

# Chequea que el codigo de central este en el archivo de centrales
function validar_codigo_central() {
  case "${COD_CENTRALES[@]}" in
      *"$codigo_a_validar"*)
        #Si el codigo es valido sigo
        #echo "Codigo Valido!"
      ;;
      *)
        # Si el codigo es invalido lo muevo a rechazados
        $GRALOG "AFREC" "$MENSAJE_CENTRAL_INEXISTENTE" "INFO"
        $MOVERA "$NOVEDADES/$file" "$RECHAZADOS"
        #mv "$NOVEDADES/$file" "$RECHAZADOS"
        let "resultado = 1"
      ;;
  esac
}

# Chequea que la fecha sea valida
# No chequea bisiestos ni esas cosas
function validar_fecha() {
  # echo "Valido fecha del archivo"
  #Valido fecha del archivo
  fecha_a_validar=$(echo $file | sed 's/^.*_//' | sed 's/\.[^.]*$//')
  anio_a_validar=$(echo ${fecha_a_validar} | cut -c1-4)
  mes_a_validar=$(echo ${fecha_a_validar} | cut -c5-6)
  dia_a_validar=$(echo ${fecha_a_validar} | cut -c7-8)

  # echo "$fecha_a_validar"
  # echo "$anio_a_validar"
  # echo "$mes_a_validar"
  # echo "$dia_a_validar"

  if [ $anio_a_validar -lt "1900" -o $anio_a_validar -gt `date +'%Y'` ]; then
    # echo "Anio invalido"
    $GRALOG "AFREC" "$MENSAJE_FECHA_INVALIDA" "INFO"
    #echo "AFREC" "$MENSAJE_FECHA_INVALIDA" "INFO"
    $MOVERA "$NOVEDADES/$file" "$RECHAZADOS"
    #mv "$NOVEDADES/$file" "$RECHAZADOS"
    let "resultado = 1"
    return
  else
    : # echo "Anio valido"
  fi

  if [ $(date -d "$fecha_a_validar" +"%Y%b%d" 2>/dev/null 1>/dev/null; echo $?) == 1 ];then
     $GRALOG "AFREC" "$MENSAJE_FECHA_INVALIDA" "INFO"
     $MOVERA "$NOVEDADES/$file" "$RECHAZADOS"
     let "resultado = 1"
  fi

}

# Chequea que no sea de hace mas de un anio
# SOLO ESTA CHEQUEANDO ANIO
function validar_antiguedad() {
  anio_actual=$(date +'%Y')
  let "antiguedad = anio_a_validar - anio_actual"
  if [ $antiguedad -lt "0" ]; then
    #echo "Archivo viejo"
    let "resultado = 1"
    $GRALOG "AFREC" "$MENSAJE_FECHA_FUERA_DE_RANGO" "INFO"
    #mv "$NOVEDADES/$file" "$RECHAZADOS"
    $MOVERA "$NOVEDADES/$file" "$RECHAZADOS"
  else
    :  # echo "antiguedad ok"
  fi
}

# Valida que la fecha sea menor o igual a la de hoy
function validar_menor_o_igual_a_hoy() {
  anio_actual=$(date +'%Y')
  mes_actual=$(date +'%m')
  dia_actual=$(date +'%d')

  if [ $anio_a_validar -le $anio_actual ]; then
    : # echo "Anio ok"

  else
    if [ $mes_a_validar -le $mes_actual ]; then
      : # echo "Mes ok"

    else
      if [ $dia_a_validar -le $dia_actual ]; then
        : # echo "Dia ok"
      else
        let "resultado = 1"
        $GRALOG "AFREC" "$MENSAJE_FECHA_INVALIDA" INFO
        $MOVERA "$NOVEDADES/$file" "$RECHAZADOS"
        #mv "$NOVEDADES/$file" "$RECHAZADOS"
      fi
    fi
  fi

}

# BEGIN
let "NUMERO_CICLO = 0"
while true; do
  MENSAJE_NUMERO_CICLO="AFREC ciclo nro. $NUMERO_CICLO"
  #echo $MENSAJE_NUMERO_CICLO
  $GRALOG "AFREC" "$MENSAJE_NUMERO_CICLO" "INFO"
  #echo "AFREC" "$MENSAJE_NUMERO_CICLO" "INFO"
  #./GraLog.sh $MENSAJE_NUMERO_CICLO
  let "NUMERO_CICLO = NUMERO_CICLO + 1"

  # echo "Voy a buscar a $NOVEDADES"
  hay_archivos $NOVEDADES
  if [ $cantidad_archivos -gt 0 ];then
    # echo "Como hay novedades las voy a validar"
    validar_tipo_archivos
    obtener_codigos_centrales
    listaArchivos=$(ls $NOVEDADES)

    for file in $listaArchivos ;do

      # Si resultado llega a ser distinto de 0 es porque alguna validacion fallo
      let "resultado = 0"
      # echo "Segunda validacion de $file"

      if [ $resultado -eq "0" ]; then
        # Valido codigo centrales
        # echo "Valido codigo de central"
        codigo_a_validar=$(echo $file | sed 's/_.*//' )
        # echo "codigo a validar $codigo_a_validar"
        validar_codigo_central "$codigo_a_validar"
      fi

      if [ $resultado -eq "0" ]; then
        # echo "Valido formato fecha"
        # Valido formato fecha
        validar_fecha
      fi

      if [ $resultado -eq "0" ]; then
        # echo "Valido antiguedad"
        # Valido antiguedad
        validar_antiguedad
      fi

      if [ $resultado -eq "0" ]; then
        # echo "Valido menor o igual a la fecha del dia"
        # Valido que sea menor o igual a la fecha del dia
        validar_menor_o_igual_a_hoy
      fi

      #### SI LLEGO HASTA ACA MOVER A ACEPTADOS
      if [ $resultado -eq "0" ]; then
      #  echo "$file aceptado"
       $GRALOG "AFREC" "Archivo $file aceptado, movido a $ACEPTADOS" "INFO"
       #mv "$NOVEDADES/$file" "$ACEPTADOS"
       $MOVERA "$NOVEDADES/$file" "$ACEPTADOS"
      fi
    done

  fi

  hay_archivos $NOVEDADES
  if [ $cantidad_archivos -eq 0 ];then
      # echo $(ls -1 "$ACEPTADOS")
      hay_archivos $ACEPTADOS
      if [ $cantidad_archivos -gt 0 ];then
        # echo "Voy a arrancar AFUMB"
        if [[ $(ps -aux | grep -e "[0-9] [a-z]* AFREC" ) == "" ]];then
          # echo "No se esta ejecutando asi que lo arranco"
            #bash $BINDIR/Arrancar.sh ./AFUMB
            PID_AFUMB=$(pgrep AFUMB)
            $GRALOG "AFREC" "AFUMB corriendo bajo el no.: $PID_AFUMB" "INFO"
        else
          # echo "Se esta ejecutando asi que lo pospongo"
          $GRALOG "AFREC" "$MENSAJE_AFUMB_OCUPADO" "WAR"
        fi
      fi
  fi


sleep "$TIEMPO_SLEEP_SEGUNDOS"
done
